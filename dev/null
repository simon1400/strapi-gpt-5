var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// dist/_chunks/App-yW-2yo0Z.js
var require_App_yW_2yo0Z = __commonJS({
  "dist/_chunks/App-yW-2yo0Z.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
    var jsxRuntime = require("react/jsx-runtime");
    var admin = require("@strapi/strapi/admin");
    var reactRouterDom = require("react-router-dom");
    var react = require("react");
    var designSystem = require("@strapi/design-system");
    var HomePage = () => {
      const [messages, setMessages] = react.useState([]);
      const [input, setInput] = react.useState("");
      const [loading, setLoading] = react.useState(false);
      const [chatId, setChatId] = react.useState(null);
      const [model, setModel] = react.useState("gpt-5-mini");
      const { user } = admin.useAuth("gpt-plugin", (v) => v);
      const sendMessage = async () => {
        if (!input.trim())
          return;
        const newMessages = [
          ...messages,
          { role: "user", content: input }
        ];
        setMessages(newMessages);
        setInput("");
        setLoading(true);
        try {
          const res = await fetch("/api/gpt/ask", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              message: input,
              model,
              chatId,
              personalName: `${user?.firstname} ${user?.lastname}`
            })
          });
          const data = await res.json();
          if (!chatId && data.chatId) {
            setChatId(data.chatId);
          }
          setMessages([
            ...newMessages,
            { role: "assistant", content: data.reply || "\u041D\u0435\u0442 \u043E\u0442\u0432\u0435\u0442\u0430" }
          ]);
        } catch (err) {
          setMessages([
            ...newMessages,
            { role: "assistant", content: "\u041E\u0448\u0438\u0431\u043A\u0430 \u043F\u0440\u0438 \u0437\u0430\u043F\u0440\u043E\u0441\u0435" }
          ]);
        } finally {
          setLoading(false);
        }
      };
      return /* @__PURE__ */ jsxRuntime.jsxs("div", { style: { padding: 32, maxWidth: 960 }, children: [
        /* @__PURE__ */ jsxRuntime.jsx("div", { style: { marginBottom: 16 }, children: /* @__PURE__ */ jsxRuntime.jsx(designSystem.Typography, { variant: "alpha", children: "AI Chat (GPT)" }) }),
        /* @__PURE__ */ jsxRuntime.jsx("div", { style: { maxWidth: 300 }, children: /* @__PURE__ */ jsxRuntime.jsxs(designSystem.SingleSelect, { value: model, onChange: (val) => setModel(val), children: [
          /* @__PURE__ */ jsxRuntime.jsx(designSystem.SingleSelectOption, { value: "gpt-5", children: "GPT-5 (\u0441\u043B\u043E\u0436\u043D\u044B\u0435 \u0437\u0430\u0434\u0430\u0447\u0438)" }),
          /* @__PURE__ */ jsxRuntime.jsx(designSystem.SingleSelectOption, { value: "gpt-5-mini", children: "GPT-5 mini (\u0431\u0430\u043B\u0430\u043D\u0441 - \u0434\u043B\u044F \u043A\u043E\u043D\u0442\u0435\u043D\u0442\u0430)" }),
          /* @__PURE__ */ jsxRuntime.jsx(designSystem.SingleSelectOption, { value: "gpt-5-nano", children: "GPT-5 nano (\u043E\u0442\u0437\u044B\u0432\u044B, \u043F\u0435\u0440\u0435\u0432\u043E\u0434, \u043E\u0442\u0432\u0435\u0442\u044B \u043D\u0430 \u0441\u043C\u0441)" })
        ] }) }),
        /* @__PURE__ */ jsxRuntime.jsx(
          "div",
          {
            style: {
              border: "1px solid #444",
              borderRadius: 8,
              padding: 16,
              marginTop: 16,
              marginBottom: 16,
              height: 600,
              overflowY: "auto",
              background: "#1a1a1a"
            },
            children: messages.map((m, i) => /* @__PURE__ */ jsxRuntime.jsx(
              "div",
              {
                style: {
                  marginBottom: 12,
                  textAlign: m.role === "user" ? "right" : "left"
                },
                children: /* @__PURE__ */ jsxRuntime.jsx(
                  "div",
                  {
                    style: {
                      display: "inline-block",
                      padding: "8px 12px",
                      borderRadius: 12,
                      fontSize: 16,
                      background: m.role === "user" ? "#4a90e2" : "#2d2d2d",
                      color: "#fff",
                      maxWidth: "85%",
                      whiteSpace: "pre-wrap"
                      // ✅ сохраняем переносы строк
                    },
                    children: m.content
                  }
                )
              },
              i
            ))
          }
        ),
        /* @__PURE__ */ jsxRuntime.jsx(
          designSystem.Textarea,
          {
            placeholder: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435...",
            value: input,
            onChange: (e) => setInput(e.target.value)
          }
        ),
        /* @__PURE__ */ jsxRuntime.jsx(designSystem.Button, { onClick: sendMessage, loading, style: { marginTop: 8 }, children: "\u041E\u0442\u043F\u0440\u0430\u0432\u0438\u0442\u044C" })
      ] });
    };
    var App = () => {
      return /* @__PURE__ */ jsxRuntime.jsxs(reactRouterDom.Routes, { children: [
        /* @__PURE__ */ jsxRuntime.jsx(reactRouterDom.Route, { index: true, element: /* @__PURE__ */ jsxRuntime.jsx(HomePage, {}) }),
        /* @__PURE__ */ jsxRuntime.jsx(reactRouterDom.Route, { path: "*", element: /* @__PURE__ */ jsxRuntime.jsx(admin.Page.Error, {}) })
      ] });
    };
    exports2.App = App;
  }
});

// dist/_chunks/en-B4KWt_jN.js
var require_en_B4KWt_jN = __commonJS({
  "dist/_chunks/en-B4KWt_jN.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
    var en = {};
    exports2.default = en;
  }
});

// dist/admin/index.js
var require_admin = __commonJS({
  "dist/admin/index.js"(exports2, module2) {
    "use strict";
    var react = require("react");
    var jsxRuntime = require("react/jsx-runtime");
    var __variableDynamicImportRuntimeHelper = (glob, path, segs) => {
      const v = glob[path];
      if (v) {
        return typeof v === "function" ? v() : Promise.resolve(v);
      }
      return new Promise((_, reject) => {
        (typeof queueMicrotask === "function" ? queueMicrotask : setTimeout)(
          reject.bind(
            null,
            new Error(
              "Unknown variable dynamic import: " + path + (path.split("/").length !== segs ? ". Note that variables only represent file names one level deep." : "")
            )
          )
        );
      });
    };
    var PLUGIN_ID = "gpt";
    var Initializer = ({ setPlugin }) => {
      const ref = react.useRef(setPlugin);
      react.useEffect(() => {
        ref.current(PLUGIN_ID);
      }, []);
      return null;
    };
    var BotIcon = (props) => /* @__PURE__ */ jsxRuntime.jsxs(
      "svg",
      {
        xmlns: "http://www.w3.org/2000/svg",
        width: 24,
        height: 24,
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: "currentColor",
        strokeWidth: 2,
        strokeLinecap: "round",
        strokeLinejoin: "round",
        ...props,
        children: [
          /* @__PURE__ */ jsxRuntime.jsx("rect", { x: "3", y: "11", width: "18", height: "10", rx: "2", ry: "2" }),
          /* @__PURE__ */ jsxRuntime.jsx("circle", { cx: "8", cy: "16", r: "1" }),
          /* @__PURE__ */ jsxRuntime.jsx("circle", { cx: "16", cy: "16", r: "1" }),
          /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M12 2v4" }),
          /* @__PURE__ */ jsxRuntime.jsx("path", { d: "M9 2h6" })
        ]
      }
    );
    var PluginIcon = () => /* @__PURE__ */ jsxRuntime.jsx(BotIcon, {});
    var index = {
      register(app) {
        app.addMenuLink({
          to: `/plugins/${PLUGIN_ID}`,
          icon: PluginIcon,
          intlLabel: {
            id: `${PLUGIN_ID}.plugin.name`,
            defaultMessage: PLUGIN_ID
          },
          Component: async () => {
            const { App } = await Promise.resolve().then(() => require_App_yW_2yo0Z());
            return App;
          }
        });
        app.registerPlugin({
          id: PLUGIN_ID,
          initializer: Initializer,
          isReady: false,
          name: PLUGIN_ID
        });
      },
      async registerTrads({ locales }) {
        return Promise.all(
          locales.map(async (locale) => {
            try {
              const { default: data } = await __variableDynamicImportRuntimeHelper(/* @__PURE__ */ Object.assign({ "./translations/en.json": () => Promise.resolve().then(() => require_en_B4KWt_jN()) }), `./translations/${locale}.json`, 3);
              return { data, locale };
            } catch {
              return { data: {}, locale };
            }
          })
        );
      }
    };
    module2.exports = index;
  }
});

// dist/server/index.js
var require_server = __commonJS({
  "dist/server/index.js"(exports2, module2) {
    "use strict";
    var OpenAI = require("openai");
    var crypto = require("crypto");
    var _interopDefault = (e) => e && e.__esModule ? e : { default: e };
    var OpenAI__default = /* @__PURE__ */ _interopDefault(OpenAI);
    var crypto__default = /* @__PURE__ */ _interopDefault(crypto);
    var bootstrap = ({ strapi: strapi2 }) => {
    };
    var destroy = ({ strapi: strapi2 }) => {
    };
    var register = ({ strapi: strapi2 }) => {
    };
    var config = {
      default: {},
      validator() {
      }
    };
    var contentTypes = {};
    var client = new OpenAI__default.default({ apiKey: process.env.OPENAI_API_KEY });
    var UID = "api::gpt-message.gpt-message";
    var hash = (s) => crypto__default.default.createHash("sha256").update(s).digest("hex");
    async function askOpenAI(model, text) {
      const c = await client.chat.completions.create({
        model,
        messages: [{ role: "user", content: text }],
        prompt_cache_key: hash(text)
      });
      return c.choices?.[0]?.message?.content ?? "\u041D\u0435\u0442 \u043E\u0442\u0432\u0435\u0442\u0430";
    }
    var ask = {
      async index(ctx) {
        try {
          const { message, model = "gpt-5-mini", chatId, personalName } = ctx.request.body;
          if (!message?.trim())
            ctx.throw(400, "Message is required");
          const reply = await askOpenAI(model, message);
          if (!chatId) {
            const created = await strapi.documents(UID).create({
              data: {
                dateTime: (/* @__PURE__ */ new Date()).toISOString(),
                model,
                personalName,
                askAnswer: [{ who: "user", content: message }, { who: "gpt", content: reply }]
              },
              fields: ["documentId"]
            });
            ctx.body = { chatId: created.documentId, reply };
            return;
          }
          const current = await strapi.documents(UID).findOne({
            documentId: chatId,
            populate: { askAnswer: true }
          });
          if (!current)
            ctx.throw(404, "Chat not found");
          await strapi.documents(UID).update({
            documentId: chatId,
            fields: ["documentId"],
            data: {
              askAnswer: [
                ...current.askAnswer,
                { who: "user", content: message },
                { who: "gpt", content: reply }
              ]
            }
          });
          ctx.body = { chatId, reply };
        } catch (err) {
          console.error("GPT error:", err);
          ctx.throw(500, err.message || "AI request failed");
        }
      }
    };
    var controllers = {
      ask
    };
    var middlewares = {};
    var policies = {};
    var contentAPIRoutes = [
      {
        method: "POST",
        path: "/ask",
        handler: "ask.index",
        config: {
          auth: false
          // можешь включить true, если только для админов
        }
      }
    ];
    var routes = {
      "content-api": {
        type: "content-api",
        routes: contentAPIRoutes
      }
    };
    var service = ({ strapi: strapi2 }) => ({
      getWelcomeMessage() {
        return "Welcome to Strapi \u{1F680}";
      }
    });
    var services = {
      service
    };
    var index = {
      register,
      bootstrap,
      destroy,
      config,
      controllers,
      routes,
      services,
      contentTypes,
      policies,
      middlewares
    };
    module2.exports = index;
  }
});

// <stdin>
require_admin();
require_server();
